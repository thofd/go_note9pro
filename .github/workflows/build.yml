name: Build SukiSU-Ultra Kernel for Gauguin

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      KERNEL_REPO: https://github.com/thofd/neko_kernel_xiaomi_gauguin
      KERNEL_BRANCH: main
      DEFCONFIG: vendor/gauguin_user_defconfig
      DEVICE_NAME: gauguin
      BUILD_USER: thofd
      BUILD_HOST: github-actions
      SUKISU_BRANCH: main
      SUKISU_REPO: https://github.com/SukiSU/SukiSU-Ultra.git
      ZIP_TOOL_REPO: https://github.com/osm0sis/AnyKernel3.git

    steps:
    - name: Checkout Kernel Source
      uses: actions/checkout@v4
      with:
        repository: ${{ env.KERNEL_REPO }}
        ref: ${{ env.KERNEL_BRANCH }}

    - name: Set up environment
      run: |
        sudo apt update
        sudo apt install -y bc bison ccache flex git libncurses5-dev libssl-dev python-is-python3 unzip zip wget

    - name: Download AOSP Clang r416183b
      run: |
        mkdir clang
        cd clang
        wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/android12-release/clang-r416183b.tar.gz
        tar -xf clang-r416183b.tar.gz
        cd ..

    - name: Clone SukiSU-Ultra
      run: |
        git clone --depth=1 $SUKISU_REPO -b $SUKISU_BRANCH SukiSU-Ultra
        cp -rf SukiSU-Ultra/sus* drivers/
        cp -rf SukiSU-Ultra/kpm* drivers/
        echo "SUSFS integrated."

    - name: Generate build info
      run: |
        BUILD_DATE=$(date +%Y%m%d-%H%M)
        ZIP_NAME=SukiSU-gauguin-${BUILD_DATE}.zip
        echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
        echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

    - name: Build Kernel
      run: |
        export PATH=$(pwd)/clang/bin:$PATH
        export ARCH=arm64
        export SUBARCH=arm64
        export KBUILD_BUILD_USER=${{ env.BUILD_USER }}
        export KBUILD_BUILD_HOST=${{ env.BUILD_HOST }}
        make O=out $DEFCONFIG
        make -j$(nproc) O=out \
          CC=clang \
          CROSS_COMPILE=aarch64-linux-android- \
          CROSS_COMPILE_ARM32=arm-linux-androideabi-

    - name: Prepare AnyKernel3
      run: |
        git clone --depth=1 $ZIP_TOOL_REPO AnyKernel3
        cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/

    - name: Create Flashable ZIP
      run: |
        cd AnyKernel3
        zip -r9 ../$ZIP_NAME *

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ZIP_NAME }}
        path: |
          ${{ env.ZIP_NAME }}
          out/arch/arm64/boot/Image.gz-dtb

    - name: Upload to GitHub Releases
      uses: softprops/action-gh-release@v2
      if: github.event_name == 'workflow_dispatch'
      with:
        files: ${{ env.ZIP_NAME }}
        name: "SukiSU Kernel for Gauguin (${{ env.BUILD_DATE }})"
        tag_name: "gauguin-${{ github.run_number }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Telegram Notification
      if: always()
      run: |
        STATUS="✅ Kernel Build Success: ${{ env.ZIP_NAME }}"
        if [ ! -f "${{ env.ZIP_NAME }}" ]; then
          STATUS="❌ Kernel Build Failed"
        fi
        curl -s -X POST https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendMessage \
          -d chat_id=${{ secrets.TG_CHAT_ID }} \
          -d text="$STATUS"
