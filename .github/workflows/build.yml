name: Build CHATGPT NOTE9PRO

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      KERNEL_NAME: Gauguin_SukiSU_Kernel
      ANY_KERNEL_REPO: https://github.com/osm0sis/AnyKernel3

    steps:
    - name: Checkout Kernel Source
      uses: actions/checkout@v4
      with:
        repository: thofd/neko_kernel_xiaomi_gauguin
        path: kernel_src

    - name: Setup Build Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libncurses-dev libssl-dev \
        bison flex libelf-dev zip ccache python3

    - name: Clone SukiSU-Ultra
      uses: actions/checkout@v4
      with:
        repository: ShirkNeko/SukiSU-Ultra
        ref: susfs-stable
        path: kernel_src/drivers/sukisu

    - name: Prepare AOSP Clang
      run: |
        wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/android12-release/clang-r416183b.tar.gz
        mkdir -p aosp-clang && tar xzf clang-r416183b.tar.gz -C aosp-clang

    - name: Setup Defconfig
      run: |
        cd kernel_src
        make gauguin_user_defconfig
        
        # 启用 SukiSU/SUSFS 所需配置
        ./scripts/config --enable CONFIG_KPROBES
        ./scripts/config --enable CONFIG_OVERLAY_FS
        ./scripts/config --enable CONFIG_SECCOMP
        ./scripts/config --module CONFIG_SUSFS
        ./scripts/config --enable CONFIG_SUKISU
        ./scripts/config --enable CONFIG_SUSFS_DEBUG
        ./scripts/config --enable CONFIG_IKCONFIG
        ./scripts/config --enable CONFIG_IKCONFIG_PROC
        
        # 保存修改后的配置
        make savedefconfig
        cp defconfig arch/arm64/configs/gauguin_user_defconfig

    - name: Build Kernel
      run: |
        cd kernel_src
        export PATH="$(pwd)/../aosp-clang/bin:$PATH"
        make -j$(nproc --all) LLVM=1 LLVM_IAS=1 \
          ARCH=arm64 \
          CC=clang \
          LD=ld.lld \
          AR=llvm-ar \
          NM=llvm-nm \
          OBJCOPY=llvm-objcopy \
          OBJDUMP=llvm-objdump \
          STRIP=llvm-strip \
          CROSS_COMPILE=aarch64-linux-gnu- \
          CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          LOCALVERSION="-${KERNEL_NAME}"
        
        cp out/arch/arm64/boot/Image.gz-dtb Image

    - name: Prepare AnyKernel3
      run: |
        git clone $ANY_KERNEL_REPO AnyKernel3
        cp kernel_src/Image AnyKernel3/
        # 添加 AnyKernel 配置文件
        echo 'device.name1=gauguin
        block=/dev/block/bootdevice/by-name/boot;
        is_slot_device=auto;
        ramdisk_compression=auto;' > AnyKernel3/anykernel.sh

    - name: Package Kernel ZIP
      run: |
        cd AnyKernel3
        zip -r9 ${KERNEL_NAME}-$(date +%Y%m%d-%H%M).zip *
        mv *.zip ../

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${KERNEL_NAME}-Build
        path: ${{ github.workspace }}/*.zip
