name: Build CHATGPT NOTE9PRO 

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    name: Build Kernel
    runs-on: ubuntu-22.04
    permissions:
      actions: write
      contents: read

    steps:
    - name: Checkout Kernel Source
      uses: actions/checkout@v4
      with:
        repository: thofd/neko_kernel_xiaomi_gauguin
        path: kernel

    - name: Install Dependencies
      run: |
        sudo apt update
        sudo apt install -y bc bison build-essential ccache curl flex git \
          kmod libssl-dev libncurses-dev libelf-dev python3 zip wget \
          ca-certificates

    - name: Download AOSP Clang r416183b
      run: |
        mkdir -p toolchain/clang
        curl -LO https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/android12-release/clang-r416183b.tar.gz
        tar -xf clang-r416183b.tar.gz -C toolchain/clang

    - name: Clone SukiSU-Ultra (susfs-stable)
      run: |
        git clone --depth=1 --branch susfs-stable https://github.com/ShirkNeko/SukiSU-Ultra su
        cp -r su/SukiSU kernel/
        cp -r su/susfs kernel/

    - name: Patch defconfig with SukiSU/SUSFS options
      run: |
        DEFCONFIG=kernel/arch/arm64/configs/vendor/gauguin_user_defconfig
        echo >> $DEFCONFIG
        echo "# SukiSU/SUSFS config options" >> $DEFCONFIG
        echo "CONFIG_SECURITY=y" >> $DEFCONFIG
        echo "CONFIG_SECURITY_SELINUX=y" >> $DEFCONFIG
        echo "CONFIG_SECURITY_SELINUX_BOOTPARAM=y" >> $DEFCONFIG
        echo "CONFIG_SECURITY_SELINUX_BOOTPARAM_VALUE=1" >> $DEFCONFIG
        echo "CONFIG_SECURITY_SELINUX_DISABLE=y" >> $DEFCONFIG
        echo "CONFIG_KSU=y" >> $DEFCONFIG
        echo "CONFIG_SUSFS=y" >> $DEFCONFIG
        echo "CONFIG_SUSFS_PROC=y" >> $DEFCONFIG
        echo "CONFIG_SUSFS_INITRC=y" >> $DEFCONFIG
        echo "CONFIG_SUSFS_SEPOLICY=y" >> $DEFCONFIG
        echo "CONFIG_SUSFS_DEBUG=y" >> $DEFCONFIG

    - name: Clone AnyKernel3
      run: |
        git clone --depth=1 https://github.com/osm0sis/AnyKernel3 AnyKernel3

    - name: Set Environment Variables
      run: |
        echo "CLANG_PATH=$GITHUB_WORKSPACE/toolchain/clang" >> $GITHUB_ENV
        echo "KERNEL_DIR=$GITHUB_WORKSPACE/kernel" >> $GITHUB_ENV
        echo "OUT_DIR=$GITHUB_WORKSPACE/kernel/out" >> $GITHUB_ENV
        echo "DEFCONFIG=vendor/gauguin_user_defconfig" >> $GITHUB_ENV
        echo "IMAGE_PATH=$GITHUB_WORKSPACE/kernel/out/arch/arm64/boot/Image" >> $GITHUB_ENV
        echo "AK3_DIR=$GITHUB_WORKSPACE/AnyKernel3" >> $GITHUB_ENV

    - name: Build Kernel
      run: |
        export PATH=$CLANG_PATH/bin:$PATH
        cd $KERNEL_DIR
        make O=$OUT_DIR ARCH=arm64 $DEFCONFIG CC=clang
        make -j$(nproc) O=$OUT_DIR ARCH=arm64 \
          CC=clang \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE=aarch64-linux-gnu- \
          CROSS_COMPILE_COMPAT=arm-linux-gnueabi- \
          LD=ld.lld

    - name: Copy Image to AnyKernel3
      run: |
        if [ ! -f "$IMAGE_PATH" ]; then
          echo "‚ùå Kernel Image not found!"
          exit 1
        fi
        cp "$IMAGE_PATH" "$AK3_DIR/Image"

    - name: Package AnyKernel3 ZIP
      run: |
        cd "$AK3_DIR"
        zip -r9 gauguin-SukiSU-Ultra.zip * -x .git README.md

    - name: Upload Flashable Kernel ZIP
      uses: actions/upload-artifact@v4
      with:
        name: gauguin-SukiSU-Ultra
        path: ${{ env.AK3_DIR }}/gauguin-SukiSU-Ultra.zip
