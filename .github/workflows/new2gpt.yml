name: Build CHATGPT NOTE9PRO 
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    env:
      ARCH: arm64
      DEFCONFIG: vendor/gauguin_user_defconfig
      CLANG_VERSION: r416183b
      ANYKERNEL_REPO: https://github.com/osm0sis/AnyKernel3.git

    steps:
      - name: Checkout kernel source
        uses: actions/checkout@v4
        with:
          repository: thofd/neko_kernel_xiaomi_gauguin
          submodules: false

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bc build-essential libncurses5-dev flex bison wget zip unzip

      - name: Download AOSP Clang ${{ env.CLANG_VERSION }}
        run: |
          export CLANG_DIR=$RUNNER_TEMP/clang
          echo "CLANG_DIR=$CLANG_DIR" >> $GITHUB_ENV
          mkdir -p "$CLANG_DIR"
          wget -qO clang.tar.gz https://gitlab.com/PixelOS-Devices/clang-builds/-/archive/r416183b/clang-builds-r416183b.tar.gz
          tar -xzf clang.tar.gz --strip-components=1 -C "$CLANG_DIR"
          rm clang.tar.gz

      - name: Export toolchain variables
        run: |
          echo "PATH=$CLANG_DIR/bin:$PATH" >> $GITHUB_ENV
          echo "CROSS_COMPILE=aarch64-linux-gnu-" >> $GITHUB_ENV
          echo "KERNEL_DIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "OUTPUT_DIR=$GITHUB_WORKSPACE/out" >> $GITHUB_ENV

      - name: Integrate SukiSU-Ultra with SUSFS
        run: |
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-dev

      - name: Prepare kernel configuration
        run: |
          mkdir -p $OUTPUT_DIR
          make ARCH=${{ env.ARCH }} O=$OUTPUT_DIR $DEFCONFIG

      - name: Compile kernel
        run: |
          make -j$(nproc) \
            ARCH=${{ env.ARCH }} O=$OUTPUT_DIR CC=clang \
            CLANG_TRIPLE=aarch64-linux-gnu- LD=ld.lld \
            OBJDUMP=llvm-objdump OBJCOPY=llvm-objcopy READELF=llvm-readelf \
            STRIP=llvm-strip CROSS_COMPILE=${{ env.CROSS_COMPILE }}

      - name: Clone AnyKernel3
        run: |
          git clone --depth 1 $ANYKERNEL_REPO AnyKernel3

      - name: Copy kernel Image
        run: |
          cp $OUTPUT_DIR/arch/arm64/boot/Image AnyKernel3

      - name: Package flashable zip
        run: |
          cd AnyKernel3
          zip -r9 ../redmi9pro-gauguin-suki.zip .

      - name: Upload flashable zip
        uses: actions/upload-artifact@v4
        with:
          name: redmi9pro-kernel-suki
          path: redmi9pro-gauguin-suki.zip
