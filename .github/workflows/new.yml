name: Kernel CI

on:
  workflow_dispatch:

env:
  KERNEL_NAME: NekoKernel-SukiSU
  DEVICE: gauguin
  ARCH: arm64
  CONFIG: gauguin_user_defconfig
  THREADS: $(nproc --all)

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout kernel source
      uses: actions/checkout@v3
      with:
        repository: thofd/neko_kernel_xiaomi_gauguin
        submodules: recursive
        fetch-depth: 0

    - name: Clone SukiSU-Ultra
      run: |
        git clone https://github.com/ShirkNeko/SukiSU-Ultra.git drivers/staging/sukisu

    - name: Setup AOSP Clang
      run: |
        wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/android12-release/clang-r416183b.tar.gz
        mkdir -p aosp-clang
        tar -xzf clang-r416183b.tar.gz -C aosp-clang
        rm clang-r416183b.tar.gz

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential flex bison libssl-dev libelf-dev libncurses-dev zip

    - name: Set build environment
      run: |
        export PATH=$(pwd)/aosp-clang/bin:$PATH
        export CLANG_TRIPLE=aarch64-linux-gnu-
        export CROSS_COMPILE=aarch64-linux-gnu-
        export CROSS_COMPILE_ARM32=arm-linux-gnueabi-
        export KBUILD_BUILD_USER=GitHubCI
        export KBUILD_BUILD_HOST=Actions

    - name: Build configuration
      run: |
        make O=out $CONFIG
        # Apply SukiSU and SUSFS configurations
        echo "CONFIG_SUSFS=y" >> out/.config
        echo "CONFIG_SUKISU=y" >> out/.config
        echo "CONFIG_STAGING=y" >> out/.config
        make O=out olddefconfig

    - name: Build kernel
      run: |
        make -j$THREADS O=out \
            CC=clang \
            CLANG_TRIPLE=aarch64-linux-gnu- \
            CROSS_COMPILE=aarch64-linux-gnu- \
            CROSS_COMPILE_ARM32=arm-linux-gnueabi-

    - name: Prepare AnyKernel3
      run: |
        git clone https://github.com/osm0sis/AnyKernel3.git -b master
        cp out/arch/arm64/boot/Image AnyKernel3/
        cp -r out/drivers/staging/sukisu AnyKernel3/modules/

    - name: Create flashable zip
      run: |
        cd AnyKernel3
        sed -i 's/device.name1=.*/device.name1=gauguin/' anykernel.sh
        sed -i 's/kernel.string=.*/kernel.string=NekoKernel-SukiSU (GitHub Actions)/' anykernel.sh
        zip -r9 ../${KERNEL_NAME}-${DEVICE}-$(date +%Y%m%d-%H%M).zip * -x .git*

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.KERNEL_NAME }}-${{ env.DEVICE }}
        path: ${{ github.workspace }}/*.zip
